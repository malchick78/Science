<!DOCTYPE html
	PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
	 "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en-US" xml:lang="en-US">
<head>
<title>Description of a5 Assignment for comp132 at UNE</title>
<link rel="stylesheet" type="text/css" href="/~comp132/UT/Css/ut.css" />
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
</head>
<body bgcolor="#cccc99">

<style type="text/css">
<!--
-->
.noul {
text-decoration:none
}
</style>


<table width=100%>
<tr>
  <td width=30%>

<a href="http://www.une.edu.au" class=noul> <img  align="left" src="/images/unelogomin.gif" border="0" alt="University of New
England"></a>
  </td>
  <td width=40% align=center>


<br>
<center>
        <a href="/" class=noul>
        <font size="+2">School of Science and Technology</font></a>
</center>
  </td>
  <td width=30%></td>
</tr>
</table>

<br clear="all" />
<hr size="6" />
<!-- do not remove or change the javascript comment below this one -->
<!-- header end -->

<center>
	<font color="black" size="+2">
		Description of a5 Assignment for comp132 at UNE
	</font>
	<hr size="6" />
</center>
<br />
<font color="black" size="">
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
            "http://www.w3.org/TR/REC-html40/loose.dtd">
<HTML>
<HEAD>
<TITLE>Programming Assignment A5 --- Stack and Recursion
</TITLE>

<META http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<META name="GENERATOR" content="hevea 1.10">
<STYLE type="text/css">
.li-itemize{margin:1ex 0ex;}
.li-enumerate{margin:1ex 0ex;}
.thefootnotes{text-align:left;margin:0ex;}
.dt-thefootnotes{margin:0em;}
.dd-thefootnotes{margin:0em 0em 0em 2em;}
.footnoterule{margin:1em auto 1em 0px;width:50%;}
.center{text-align:center;margin-left:auto;margin-right:auto;}
DIV TABLE{margin-left:inherit;margin-right:inherit;}
PRE{text-align:left;margin-left:0ex;margin-right:auto;}
BLOCKQUOTE{margin-left:4ex;margin-right:4ex;text-align:left;}
TD P{margin:0px;}
.minipage{text-align:left; margin-left:0em; margin-right:auto;}
.section{padding:.5ex; color:navy; background: LightYellow;}
.javalisting{font-family:monospace;white-space:pre;
border:1px dashed red;background: #f9f9f9;
padding-left:2ex;padding-top:3pt;padding-bottom:3pt;
margin-left:1ex;margin-right:67pt;margin-top:1ex;margin-bottom:1ex;}
.tty{font-family:monospace;white-space:pre;
border:none;background: #f5f5f5;
padding-left:2ex;padding-top:7pt;padding-bottom:13pt;
margin-left:2ex;margin-right:97pt;}
</STYLE>
</HEAD>
<BODY >
<!--HEVEA command line is: hevea -O -I ../.. -I ../../.. a5.tex -->
<!--CUT DEF section 1 --><DIV CLASS="center"><FONT SIZE=5><B>Programming Assignment A5 &#X2014; <EM>Stack and Recursion</EM></B></FONT><BR>
Due 13 May
</DIV><!--TOC section Objectives-->
<H2 CLASS="section"><!--SEC ANCHOR -->Objectives</H2><!--SEC END --><UL CLASS="itemize"><LI CLASS="li-itemize">
Analysing algorithms involving recursion
</LI><LI CLASS="li-itemize">Using Java classes
</LI><LI CLASS="li-itemize">Using stacks
</LI></UL><!--TOC section Task: eliminate recursion using stacks-->
<H2 CLASS="section"><!--SEC ANCHOR -->Task: eliminate recursion using stacks</H2><!--SEC END --><P>In mathematics a <EM>combination</EM> is a way of selecting several items
from a larger collection, where (unlike permutations) order does not matter.
For example from three items of different colours, red, green and blue,
we can choose two items in three different ways: red and green, red and blue or green and blue.</P><P>The number of <I>m</I>-combinations from a set of <I>n</I> elements is often denoted <I>C</I>(<I>n</I>, <I>m</I>) or
the binomial symbol (<I><SUB>m</SUB><SUP>n</SUP></I>).</P><P>For example, a poker hand can be described as a 5-combination (<I>m</I> = 5) of cards from
a 52 card deck (<I>n</I> = 52).
The 5 cards of the hand are all distinct, and the order of cards in the hand does not matter.
There are <I>C</I>(52,5) = 2,598,960 such combinations.</P><P>Our task is to use a stack in order to eliminate recursion from the following function
returning a number of combinations:
	</P><DIV CLASS="javalisting">function comb( n, m: integer) : integer
    <FONT COLOR="fuchsia"><I>{ computes (<SUB>m</SUB><SUP>n</SUP>) assuming 0 &#X2264; m &#X2264; n and n &#X2265; 1 }</I></FONT>
    begin
        <B>if</B> (n = 1) <B>or</B> (m = 0) <B>or</B> (m = n) <B>then
            return</B> (1)
        <B>else
            return</B> (comb(n-1, m) + comb(n-1, m-1))
    end; <FONT COLOR="fuchsia"><I>{ comb }</I></FONT></DIV><P>In Java, the function <CODE>comb</CODE> above can be implemented as a static method:
</P><DIV CLASS="javalisting"><FONT COLOR="lime">/**
 * Comb: computes C(n, m) assuming 0 &lt;= m &lt;= n and n &gt;= 1
 */</FONT>
<FONT COLOR="#B7140B"><B>static int</B></FONT> Comb(<FONT COLOR="#B7140B"><B>int</B></FONT> n, <FONT COLOR="#B7140B"><B>int</B></FONT> m)
{
    <FONT COLOR="#B7140B"><B>if</B></FONT> ((n == 1) || (m == 0) || (m == n))
        <FONT COLOR="#B7140B"><B>return</B></FONT> 1;
    <FONT COLOR="#B7140B"><B>else
        return</B></FONT> Comb(n-1, m) + Comb(n-1, m-1);
} <FONT COLOR="lime">// Comb</FONT></DIV><P>Rewrite the <CODE>Comb(int n, int m)</CODE> method and replace the recursive calls with storing
intermediate results on a stack.
You should use your own, minimal implementation of a stack in a public class <CODE>Stack</CODE>.
You should also research performance of the non-recursive <CODE>Comb</CODE> method that you implemented,
in terms of speed and storage.
See Lecture Notes for examples of similar analysis.</P><!--TOC section Examples-->
<H2 CLASS="section"><!--SEC ANCHOR -->Examples</H2><!--SEC END --><!--TOC paragraph Note:-->
<H5 CLASS="paragraph"><!--SEC ANCHOR -->Note:</H5><!--SEC END --><P> user entered values are shown in <B>bold</B>.</P><!--TOC subsubsection Example 1-->
<H4 CLASS="subsubsection"><!--SEC ANCHOR -->Example 1</H4><!--SEC END --><DIV CLASS="tty">This program calculates the number of m-combinations
from a collection of n items.

Enter two numbers, n m (n &gt;= m &gt;= 0): <B>5 3</B>
The number of combinations C(5,3) = 10</DIV><!--TOC subsubsection Example 2-->
<H4 CLASS="subsubsection"><!--SEC ANCHOR -->Example 2</H4><!--SEC END --><DIV CLASS="tty">This program calculates the number of m-combinations
from a collection of n items.

Enter two numbers, n m (n &gt;= m &gt;= 0): <B>52 5</B>
The number of combinations C(52,5) = 2598960</DIV><!--TOC section Important Notes-->
<H2 CLASS="section"><!--SEC ANCHOR -->Important Notes</H2><!--SEC END --><OL CLASS="enumerate" type=1><LI CLASS="li-enumerate">
In your program you must define and make use of <CODE>Stack</CODE> class.</LI><LI CLASS="li-enumerate">Test your program. In particular, be sure to test it on <B>turing</B> before
you submit it.
Testing is a part of the assessment, see the Assessment section below.
</LI></OL><!--TOC section Submitting this Assignment-->
<H2 CLASS="section"><!--SEC ANCHOR -->Submitting this Assignment</H2><!--SEC END --><UL CLASS="itemize"><LI CLASS="li-itemize">
Your assignment must be submitted using the <CODE>submit</CODE> program on <B>turing</B>. 
</LI><LI CLASS="li-itemize">This assignment is assignment <B>a5</B>.</LI><LI CLASS="li-itemize">From within the <CODE>submit</CODE> program, create a script of your program
		(select option&#XA0;1)
		compiling and running correctly on <B>turing</B>.
		It is a part of the assessment, see marking criteria below.</LI><LI CLASS="li-itemize">You will need to submit at least <B>three</B> files for this assignment:
	<OL CLASS="enumerate" type=1><LI CLASS="li-enumerate">
	 An algorithm for <B>all the methods</B> of the application <CODE>Combinations</CODE>.
	 		It should be in a plain text file called <CODE>Combinations.txt</CODE>.
			You should specify what each of the method receives, what outputs and
			operations performs.
			In the same file write your analysis of performance of the non-recursive <CODE>Comb</CODE>
			method that you defined.
			
	 </LI><LI CLASS="li-enumerate">The source code for the program. 
			It should be in a plain text file called <CODE>Combinations.java</CODE>. 
			
	 </LI><LI CLASS="li-enumerate">The source code for the <CODE>Stack</CODE> class. 
			It should be in a plain text file called <CODE>Stack.java</CODE>. 
	</LI></OL>
	
</LI><LI CLASS="li-itemize">After you have submitted your assignment files and exited the submit 
		program, check the submit record that the submit program placed in your 
		directory. It should show the names of the files you submitted along with
		their size and submit date. It should also contain a copy of the script
		you created. If the submit record doesn&#X2019;t list the required files or shows
		that one of the files has a file size of&#XA0;0 (i.e., the file is empty) or
		doesn&#X2019;t contain a copy of your script, you will need to resubmit your 
		entire assignment again. 
</LI></UL><!--TOC section Reminders-->
<H2 CLASS="section"><!--SEC ANCHOR -->Reminders</H2><!--SEC END --><UL CLASS="itemize"><LI CLASS="li-itemize">
The comp132 online subdirectory for this assignment contains an 
		<A HREF="http://mcs.une.edu.au/~comp132/Assignments/Assignment_A3/Updates">update</A> file.
		The file is updated regularly 
		with additional comments and hints regarding this assignment as questions
		come in from students. Be sure to check this file prior to the assignment
		due date in case any additional information has been provided.</LI><LI CLASS="li-itemize">If you have any questions regarding this assignment,
		<B>check the updates</B> for this assignment.
		If your question has not been addressed, then
		<B>email</B> <A HREF="mailto:comp132@mcs.une.edu.au">comp132@mcs.une.edu.au</A></LI><LI CLASS="li-itemize">Submissions by electronic mail or post will not be marked.</LI><LI CLASS="li-itemize">During the marking procedure, your program may be tested with
		a data set that differs from the sample shown above.</LI><LI CLASS="li-itemize">It is not acceptable to post assignment code to the 
		comp132 Bulletin Board.</LI></UL><!--TOC section Assessment-->
<H2 CLASS="section"><!--SEC ANCHOR -->Assessment</H2><!--SEC END --><P><A NAME="sec-assessment"></A>
Your assignment will be marked on the following criteria:
</P><DIV CLASS="center">
<DIV CLASS="minipage">
<TABLE BORDER=1 CELLSPACING=0 CELLPADDING=1><TR><TD ALIGN=center NOWRAP bgcolor="#CC9999"><B><EM>Documentation</EM></B></TD><TD ALIGN=center NOWRAP bgcolor="#CC9999"><B><EM>out of 4</EM></B></TD></TR>
<TR><TD ALIGN=left NOWRAP>Algorithm file accurately describes all the methods</TD><TD ALIGN=right NOWRAP>out of 2.0</TD></TR>
<TR><TD ALIGN=left NOWRAP>Style and accurate, and sufficient commenting</TD><TD ALIGN=right NOWRAP>out of 2.0</TD></TR>
<TR><TD ALIGN=center NOWRAP bgcolor="#CC9999"><EM><B>Programming</B><SUP><A NAME="text1" HREF="#note1">1</A></SUP></EM></TD><TD ALIGN=center NOWRAP bgcolor="#CC9999"><B><EM>out of 6</EM></B></TD></TR>
<TR><TD ALIGN=left NOWRAP>Compiling and testing of the program</TD><TD ALIGN=right NOWRAP>out of 1.0</TD></TR>
<TR><TD ALIGN=left NOWRAP>Correct implementation of the <CODE>Comb</CODE> method	</TD><TD ALIGN=right NOWRAP>out of 3.0</TD></TR>
<TR><TD ALIGN=left NOWRAP>Analysis of performance of the non-recursive <CODE>Comb</CODE> method</TD><TD ALIGN=right NOWRAP>out of 1.0</TD></TR>
<TR><TD ALIGN=left NOWRAP>Code improvements<SUP><A NAME="text2" HREF="#note2">2</A></SUP>
										</TD><TD ALIGN=right NOWRAP>out of 1.0</TD></TR>
<TR><TD ALIGN=right NOWRAP bgcolor="#CC9999"><B><EM>Total:</EM></B>	</TD><TD ALIGN=left NOWRAP bgcolor="#CC9999"><B><EM>10 marks</EM></B></TD></TR>
</TABLE>
<!--BEGIN STICKYNOTES document-->
<HR CLASS="footnoterule"><DL CLASS="thefootnotes"><DT CLASS="dt-thefootnotes">
<A NAME="note1" HREF="#text1">1</A></DT><DD CLASS="dd-thefootnotes">		If your program does not compile on <B>turing</B> then your assignment receives
		0.0 marks for programming.
</DD><DT CLASS="dt-thefootnotes"><A NAME="note2" HREF="#text2">2</A></DT><DD CLASS="dd-thefootnotes">	For this assignment code improvement includes error handling
		and errors signalling with exceptions.
</DD></DL>
<!--END NOTES-->
</DIV>
</DIV><!--CUT END -->
<!--HTMLFOOT-->
<!--ENDHTML-->
<!--FOOTER-->
<HR SIZE=2><BLOCKQUOTE CLASS="quote"><EM>This document was translated from L<sup>A</sup>T<sub>E</sub>X by
<A HREF="http://hevea.inria.fr/index.html">H<FONT SIZE=2><sup>E</sup></FONT>V<FONT SIZE=2><sup>E</sup></FONT>A</A>.</EM></BLOCKQUOTE></BODY>
</HTML>
</font>
<!-- footer begin -->
<!-- do not remove or change the javascript comment above this one -->
<hr />
<table border="0" cellspacing="0" cellpadding="0" width=100%>
<tr VALIGN="middle">
<td align="left">
E-mail
 <a href="mailto:comp132@turing.une.edu.au">
                comp132@turing.une.edu.au</a>
</td>
<td align="right">
<a HREF="/~comp132/"><img SRC="/icons/small/back.png" BORDER="0" ALT="[HOME]"></a>
<a HREF="/~comp132/" title="comp132 home page">~comp132</a>
</td>
</tr>
</table>
<hr />
<font size="-1">
        index.cgi size 188.  Last modified Wed Jan 18 11:07:47 2012<br />

        This page has been visited 767 times since Wed Jul  9 18:10:33 2008<br />

This page is constructed using: <a href="http://mcs.une.edu.au/~wwwdev">
The Unit Template version 0.2.</a>
</font>
<hr />

<a href="http://www.une.edu.au/">
        <img border="0" align="left" src="/images/unehomepage.gif"
        alt="unehomepage.gif"/></a>

<a href="http://maths.une.edu.au/">
        <img border="0" align="right" src="/images/dpt_home.gif"
        alt="departmenthome.gif"/></a>
<br />
<br />
<hr />
</body>
</html>

